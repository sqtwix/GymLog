import React, { useEffect } from 'react';
import { Clock, Dumbbell, FileText, Calendar as CalendarIcon } from 'lucide-react';
import './TrainDetails.css';

const TrainDetails = ({ selectedDate, trains = [] }) => {
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è selectedDate –∏ trains
  useEffect(() => {
    console.log('TrainDetails - useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', {
      selectedDate: selectedDate?.toDateString(),
      trainsCount: trains.length,
      trains: trains
    });
  }, [selectedDate, trains]);
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  const dayTrains = trains.filter(train => {
    if (!train.date || !selectedDate) return false;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
    let trainDate;
    if (typeof train.date === 'string') {
      trainDate = new Date(train.date);
    } else {
      trainDate = new Date(train.date);
    }
    
    const selected = new Date(selectedDate);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç
    if (isNaN(trainDate.getTime()) || isNaN(selected.getTime())) {
      console.log('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞:', { trainDate: train.date, selectedDate });
      return false;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const trainDateOnly = new Date(trainDate.getFullYear(), trainDate.getMonth(), trainDate.getDate());
    const selectedDateOnly = new Date(selected.getFullYear(), selected.getMonth(), selected.getDate());
    
    const isMatch = trainDateOnly.getTime() === selectedDateOnly.getTime();
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –í–°–ï–• —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', {
      trainDate: trainDate.toDateString(),
      selectedDate: selected.toDateString(),
      trainDateOnly: trainDateOnly.toDateString(),
      selectedDateOnly: selectedDateOnly.toDateString(),
      isMatch,
      train: train
    });
    
    return isMatch;
  });
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('TrainDetails - selectedDate:', selectedDate?.toDateString(), 'dayTrains:', dayTrains.length);

  const formatTime = (minutes) => {
    if (minutes < 60) {
      return `${minutes} –º–∏–Ω`;
    }
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return mins > 0 ? `${hours}—á ${mins}–º–∏–Ω` : `${hours}—á`;
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case '–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª':
        return 'üèãÔ∏è';
      case '–ë–µ–≥':
        return 'üèÉ';
      case '–ü–ª–∞–≤–∞–Ω–∏–µ':
        return 'üèä';
      case '–ô–æ–≥–∞':
        return 'üßò';
      case '–§–∏—Ç–Ω–µ—Å':
        return 'üí™';
      case '–ë–æ–µ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ':
        return 'ü•ã';
      default:
        return 'üèÉ';
    }
  };

  if (dayTrains.length === 0) {
    return (
      <div className="train-details">
        <div className="no-trains">
          <CalendarIcon size={48} className="no-trains-icon" />
          <h3>–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h3>
          <p>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</p>
        </div>
      </div>
    );
  }

  return (
    <div className="train-details">
      <div className="trains-header">
        <h3>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ {selectedDate.toLocaleDateString('ru-RU', {
          weekday: 'long',
          day: 'numeric',
          month: 'long'
        })}</h3>
        <span className="trains-count">{dayTrains.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</span>
      </div>

      <div className="trains-list">
        {dayTrains.map((train, index) => (
          <div key={index} className="train-card">
            <div className="train-header">
              <div className="train-type">
                <span className="train-icon">{getTypeIcon(train.type)}</span>
                <span className="train-type-name">{train.type}</span>
              </div>
              <div className="train-duration">
                <Clock size={16} />
                <span>{formatTime(train.duration)}</span>
              </div>
            </div>

            <div className="train-description">
              <FileText size={16} />
              <span>{train.description}</span>
            </div>

            <div className="train-time">
              <CalendarIcon size={16} />
              <span>
                {new Date(train.date).toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TrainDetails;
